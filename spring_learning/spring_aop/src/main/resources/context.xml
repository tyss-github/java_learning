<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/aop
	   http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--1、 创建目标类 -->
    <bean id="userService" class="com.yuceyi.aop.UserServiceImpl"></bean>  
    <!--2、创建切面类（通知）  -->
    <bean id="myAspect" class="com.yuceyi.aop.MyAspect"></bean>
     
    <bean id="testUser" class="com.yuceyi.aop.User">
	<property name="uid" value="1"></property>
    </bean>
    <!--3、aop编程 
        3.1 导入命名空间
        3.2 使用 <aop:config>进行配置
                proxy-target-class="true" 声明时使用cglib代理
                如果不声明，Spring 会自动选择cglib代理还是JDK动态代理
            <aop:pointcut> 切入点 ，从目标对象获得具体方法
            <aop:advisor> 特殊的切面，只有一个通知 和 一个切入点
                advice-ref 通知引用
                pointcut-ref 切入点引用
        3.3 切入点表达式
            execution(* com.ys.aop.*.*(..))
            选择方法         返回值任意   包             类名任意   方法名任意   参数任意
     
    -->
    <aop:config>
        <!-- 切入点表达式 -->
        <aop:aspect ref="myAspect">
            <aop:around method="myAround" pointcut-ref="myPointCut"/>
	    <aop:pointcut expression="execution(* com.yuceyi.aop.UserServiceImpl.*(..))" id="myPointCut"/>
            <!-- 配置前置通知，注意 method 的值要和 对应切面的类方法名称相同 -->
            <aop:before method="myBefore" pointcut-ref="myPointCut"></aop:before>
            <aop:after method="myAfter" pointcut-ref="myPointCut"/>
            <aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="ret"/>
            <aop:after-throwing method="myAfterThrowing" throwing="e" pointcut-ref="myPointCut"/>
        </aop:aspect>
    </aop:config>
</beans>

